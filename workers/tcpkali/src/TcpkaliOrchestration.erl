%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.2
%% Purpose: encoder and decoder to the types in mod TcpkaliOrchestration

-module('TcpkaliOrchestration').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("TcpkaliOrchestration.hrl").
-asn1_info([{vsn,'4.0.2'},
            {module,'TcpkaliOrchestration'},
            {options,[{i,"/Users/tbarmin/mz-bench/workers/tcpkali/src"},
 warnings,ber,errors,
 {cwd,"/Users/tbarmin/mz-bench/workers/tcpkali/src"},
 {outdir,"/Users/tbarmin/mz-bench/workers/tcpkali/src"},
 der,
 {i,"."},
 {i,"/Users/tbarmin/mz-bench/workers/tcpkali/src/../tcpkali/asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_TcpkaliMessage'/2,
'enc_Start'/2,
'enc_Stop'/2,
'enc_TcpPort'/2,
'enc_IncreaseRatePercent'/2,
'enc_DecreaseRatePercent'/2,
'enc_SetRate'/2,
'enc_CurrentRate'/2,
'enc_PositiveInteger'/2,
'enc_NonNegativeReal'/2,
'enc_PositiveReal'/2,
'enc_URL'/2
]).

-export([
'dec_TcpkaliMessage'/2,
'dec_Start'/2,
'dec_Stop'/2,
'dec_TcpPort'/2,
'dec_IncreaseRatePercent'/2,
'dec_DecreaseRatePercent'/2,
'dec_SetRate'/2,
'dec_CurrentRate'/2,
'dec_PositiveInteger'/2,
'dec_NonNegativeReal'/2,
'dec_PositiveReal'/2,
'dec_URL'/2
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('TcpkaliMessage',Data) -> 'enc_TcpkaliMessage'(Data);
encode_disp('Start',Data) -> 'enc_Start'(Data);
encode_disp('Stop',Data) -> 'enc_Stop'(Data);
encode_disp('TcpPort',Data) -> 'enc_TcpPort'(Data);
encode_disp('IncreaseRatePercent',Data) -> 'enc_IncreaseRatePercent'(Data);
encode_disp('DecreaseRatePercent',Data) -> 'enc_DecreaseRatePercent'(Data);
encode_disp('SetRate',Data) -> 'enc_SetRate'(Data);
encode_disp('CurrentRate',Data) -> 'enc_CurrentRate'(Data);
encode_disp('PositiveInteger',Data) -> 'enc_PositiveInteger'(Data);
encode_disp('NonNegativeReal',Data) -> 'enc_NonNegativeReal'(Data);
encode_disp('PositiveReal',Data) -> 'enc_PositiveReal'(Data);
encode_disp('URL',Data) -> 'enc_URL'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('TcpkaliMessage',Data) -> 'dec_TcpkaliMessage'(Data);
decode_disp('Start',Data) -> 'dec_Start'(Data);
decode_disp('Stop',Data) -> 'dec_Stop'(Data);
decode_disp('TcpPort',Data) -> 'dec_TcpPort'(Data);
decode_disp('IncreaseRatePercent',Data) -> 'dec_IncreaseRatePercent'(Data);
decode_disp('DecreaseRatePercent',Data) -> 'dec_DecreaseRatePercent'(Data);
decode_disp('SetRate',Data) -> 'dec_SetRate'(Data);
decode_disp('CurrentRate',Data) -> 'dec_CurrentRate'(Data);
decode_disp('PositiveInteger',Data) -> 'dec_PositiveInteger'(Data);
decode_disp('NonNegativeReal',Data) -> 'dec_NonNegativeReal'(Data);
decode_disp('PositiveReal',Data) -> 'dec_PositiveReal'(Data);
decode_disp('URL',Data) -> 'dec_URL'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  TcpkaliMessage
%%================================
'enc_TcpkaliMessage'(Val) ->
    'enc_TcpkaliMessage'(Val, []).

'enc_TcpkaliMessage'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      start ->
         'enc_Start'(element(2,Val), [<<160>>]);
      stop ->
         'enc_Stop'(element(2,Val), [<<161>>]);
      increaseRatePercent ->
         encode_integer(element(2,Val), [<<130>>]);
      decreaseRatePercent ->
         encode_integer(element(2,Val), [<<131>>]);
      setRate ->
         begin
Realval1 = ber_encode_real(element(2,Val)),
Realsize1 = byte_size(Realval1),
encode_tags([<<132>>], Realval1, Realsize1)
end;
      currentRate ->
         'enc_CurrentRate'(element(2,Val), [<<165>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_TcpkaliMessage'(Tlv) ->
   'dec_TcpkaliMessage'(Tlv, []).

'dec_TcpkaliMessage'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'start'
    {131072, V1} -> 
        {start, 'dec_Start'(V1, [])};


%% 'stop'
    {131073, V1} -> 
        {stop, 'dec_Stop'(V1, [])};


%% 'increaseRatePercent'
    {131074, V1} -> 
        {increaseRatePercent, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'decreaseRatePercent'
    {131075, V1} -> 
        {decreaseRatePercent, begin
Val2 = decode_integer(V1, []),
if 1 =< Val2, Val2 =< 100 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'setRate'
    {131076, V1} -> 
        {setRate, begin
Tmpbuf1 = match_tags(V1, []),
decode_real(Tmpbuf1)
end
};


%% 'currentRate'
    {131077, V1} -> 
        {currentRate, 'dec_CurrentRate'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  Start
%%================================
'enc_Start'(Val) ->
    'enc_Start'(Val, [<<48>>]).

'enc_Start'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26, Cindex27, Cindex28, Cindex29, Cindex30, Cindex31, Cindex32, Cindex33, Cindex34, Cindex35, Cindex36, Cindex37} = Val,

%%-------------------------------------------------
%% attribute target(1) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute nagle(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute rcvbuf(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute sndbuf(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute writeCombine(5) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute workers(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute ws(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute ssl(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute sslCert(9) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute sslKey(10) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute header(11) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute connections(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute connectRate(13) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval1 = ber_encode_real(Cindex13),
Realsize1 = byte_size(Realval1),
encode_tags([<<140>>], Realval1, Realsize1)
end
       end,

%%-------------------------------------------------
%% attribute connectTimeout(14) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval2 = ber_encode_real(Cindex14),
Realsize2 = byte_size(Realval2),
encode_tags([<<141>>], Realval2, Realsize2)
end
       end,

%%-------------------------------------------------
%% attribute channelLifetime(15) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval3 = ber_encode_real(Cindex15),
Realsize3 = byte_size(Realval3),
encode_tags([<<142>>], Realval3, Realsize3)
end
       end,

%%-------------------------------------------------
%% attribute channelBandwidthUpstream(16) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval4 = ber_encode_real(Cindex16),
Realsize4 = byte_size(Realval4),
encode_tags([<<143>>], Realval4, Realsize4)
end
       end,

%%-------------------------------------------------
%% attribute channelBandwidthDownstream(17) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval5 = ber_encode_real(Cindex17),
Realsize5 = byte_size(Realval5),
encode_tags([<<144>>], Realval5, Realsize5)
end
       end,

%%-------------------------------------------------
%% attribute listenPort(18) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute listenMode(19) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex19 of
silent -> encode_tags([<<146>>], [0], 1);
active -> encode_tags([<<146>>], [1], 1);
Enumval19 -> exit({error,{asn1, {enumerated_not_in_range,Enumval19}}})
end
       end,

%%-------------------------------------------------
%% attribute duration(20) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval6 = ber_encode_real(Cindex20),
Realsize6 = byte_size(Realval6),
encode_tags([<<147>>], Realval6, Realsize6)
end
       end,

%%-------------------------------------------------
%% attribute delaySend(21) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval7 = ber_encode_real(Cindex21),
Realsize7 = byte_size(Realval7),
encode_tags([<<148>>], Realval7, Realsize7)
end
       end,

%%-------------------------------------------------
%% attribute firstMessage(22) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex22, [<<149>>])
       end,

%%-------------------------------------------------
%% attribute message(23) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex23, [<<150>>])
       end,

%%-------------------------------------------------
%% attribute messageFile(24) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex24, [<<151>>])
       end,

%%-------------------------------------------------
%% attribute messageRate(25) with type REAL OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            begin
Realval8 = ber_encode_real(Cindex25),
Realsize8 = byte_size(Realval8),
encode_tags([<<152>>], Realval8, Realsize8)
end
       end,

%%-------------------------------------------------
%% attribute messageStop(26) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex26, [<<153>>])
       end,

%%-------------------------------------------------
%% attribute latencyConnect(27) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes27,EncLen27} =  case Cindex27 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex27, [<<154>>])
       end,

%%-------------------------------------------------
%% attribute latencyFirstByte(28) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes28,EncLen28} =  case Cindex28 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex28, [<<155>>])
       end,

%%-------------------------------------------------
%% attribute latencyMarker(29) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes29,EncLen29} =  case Cindex29 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex29, [<<156>>])
       end,

%%-------------------------------------------------
%% attribute latencyMarkerSkip(30) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes30,EncLen30} =  case Cindex30 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex30, [<<157>>])
       end,

%%-------------------------------------------------
%% attribute latencyPercentiles(31) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes31,EncLen31} =  case Cindex31 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex31, [<<158>>])
       end,

%%-------------------------------------------------
%% attribute messageMarker(32) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes32,EncLen32} =  case Cindex32 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex32, [<<159,31>>])
       end,

%%-------------------------------------------------
%% attribute statsd(33) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes33,EncLen33} =  case Cindex33 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex33, [<<159,32>>])
       end,

%%-------------------------------------------------
%% attribute statsdHost(34) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes34,EncLen34} =  case Cindex34 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex34, [<<159,33>>])
       end,

%%-------------------------------------------------
%% attribute statsdPort(35) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes35,EncLen35} =  case Cindex35 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex35, [<<159,34>>])
       end,

%%-------------------------------------------------
%% attribute statsdNamespace(36) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes36,EncLen36} =  case Cindex36 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex36, [<<159,35>>])
       end,

%%-------------------------------------------------
%% attribute statsdLatencyWindow(37) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes37,EncLen37} =  case Cindex37 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex37, [<<159,36>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26, EncBytes27, EncBytes28, EncBytes29, EncBytes30, EncBytes31, EncBytes32, EncBytes33, EncBytes34, EncBytes35, EncBytes36, EncBytes37],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26 + EncLen27 + EncLen28 + EncLen29 + EncLen30 + EncLen31 + EncLen32 + EncLen33 + EncLen34 + EncLen35 + EncLen36 + EncLen37,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Start'(Tlv) ->
   'dec_Start'(Tlv, [16]).

'dec_Start'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute target(1) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
binary_to_list(decode_restricted_string(V1, []))
end
, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute nagle(2) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute rcvbuf(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_integer(V3, []),
if 1 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute sndbuf(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if 1 =< Val2, Val2 =< 'MAX' ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute writeCombine(5) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_boolean(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute workers(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val3 = decode_integer(V6, []),
if 1 =< Val3, Val3 =< 'MAX' ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute ws(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute ssl(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute sslCert(9) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
binary_to_list(decode_restricted_string(V9, []))
end
, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute sslKey(10) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
binary_to_list(decode_restricted_string(V10, []))
end
, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute header(11) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
binary_to_list(decode_restricted_string(V11, []))
end
, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute connections(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val4 = decode_integer(V12, []),
if 1 =< Val4, Val4 =< 'MAX' ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute connectRate(13) with type REAL OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Tmpbuf1 = match_tags(V13, []),
decode_real(Tmpbuf1)
end
, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute connectTimeout(14) with type REAL OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Tmpbuf2 = match_tags(V14, []),
decode_real(Tmpbuf2)
end
, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute channelLifetime(15) with type REAL OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Tmpbuf3 = match_tags(V15, []),
decode_real(Tmpbuf3)
end
, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute channelBandwidthUpstream(16) with type REAL OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
Tmpbuf4 = match_tags(V16, []),
decode_real(Tmpbuf4)
end
, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute channelBandwidthDownstream(17) with type REAL OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
Tmpbuf5 = match_tags(V17, []),
decode_real(Tmpbuf5)
end
, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute listenPort(18) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
Val5 = decode_integer(V18, []),
if 1 =< Val5, Val5 =< 65535 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute listenMode(19) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {case decode_integer(V19, []) of
0 -> silent;
1 -> active;
Default1 -> {asn1_enum,Default1}
end, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute duration(20) with type REAL OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
Tmpbuf6 = match_tags(V20, []),
decode_real(Tmpbuf6)
end
, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute delaySend(21) with type REAL OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
Tmpbuf7 = match_tags(V21, []),
decode_real(Tmpbuf7)
end
, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute firstMessage(22) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {decode_octet_string(V22, []), TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute message(23) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131094,V23}|TempTlv24] ->
    {decode_octet_string(V23, []), TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

%%-------------------------------------------------
%% attribute messageFile(24) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131095,V24}|TempTlv25] ->
    {begin
binary_to_list(decode_restricted_string(V24, []))
end
, TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute messageRate(25) with type REAL OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131096,V25}|TempTlv26] ->
    {begin
Tmpbuf8 = match_tags(V25, []),
decode_real(Tmpbuf8)
end
, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute messageStop(26) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131097,V26}|TempTlv27] ->
    {decode_octet_string(V26, []), TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

%%-------------------------------------------------
%% attribute latencyConnect(27) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term27,Tlv28} = case Tlv27 of
[{131098,V27}|TempTlv28] ->
    {decode_boolean(V27, []), TempTlv28};
    _ ->
        { asn1_NOVALUE, Tlv27}
end,

%%-------------------------------------------------
%% attribute latencyFirstByte(28) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term28,Tlv29} = case Tlv28 of
[{131099,V28}|TempTlv29] ->
    {decode_boolean(V28, []), TempTlv29};
    _ ->
        { asn1_NOVALUE, Tlv28}
end,

%%-------------------------------------------------
%% attribute latencyMarker(29) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term29,Tlv30} = case Tlv29 of
[{131100,V29}|TempTlv30] ->
    {begin
binary_to_list(decode_restricted_string(V29, []))
end
, TempTlv30};
    _ ->
        { asn1_NOVALUE, Tlv29}
end,

%%-------------------------------------------------
%% attribute latencyMarkerSkip(30) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term30,Tlv31} = case Tlv30 of
[{131101,V30}|TempTlv31] ->
    {begin
Val6 = decode_integer(V30, []),
if 1 =< Val6, Val6 =< 'MAX' ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv31};
    _ ->
        { asn1_NOVALUE, Tlv30}
end,

%%-------------------------------------------------
%% attribute latencyPercentiles(31) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term31,Tlv32} = case Tlv31 of
[{131102,V31}|TempTlv32] ->
    {begin
binary_to_list(decode_restricted_string(V31, []))
end
, TempTlv32};
    _ ->
        { asn1_NOVALUE, Tlv31}
end,

%%-------------------------------------------------
%% attribute messageMarker(32) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term32,Tlv33} = case Tlv32 of
[{131103,V32}|TempTlv33] ->
    {decode_boolean(V32, []), TempTlv33};
    _ ->
        { asn1_NOVALUE, Tlv32}
end,

%%-------------------------------------------------
%% attribute statsd(33) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term33,Tlv34} = case Tlv33 of
[{131104,V33}|TempTlv34] ->
    {decode_boolean(V33, []), TempTlv34};
    _ ->
        { asn1_NOVALUE, Tlv33}
end,

%%-------------------------------------------------
%% attribute statsdHost(34) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term34,Tlv35} = case Tlv34 of
[{131105,V34}|TempTlv35] ->
    {begin
binary_to_list(decode_restricted_string(V34, []))
end
, TempTlv35};
    _ ->
        { asn1_NOVALUE, Tlv34}
end,

%%-------------------------------------------------
%% attribute statsdPort(35) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term35,Tlv36} = case Tlv35 of
[{131106,V35}|TempTlv36] ->
    {begin
Val7 = decode_integer(V35, []),
if 1 =< Val7, Val7 =< 65535 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv36};
    _ ->
        { asn1_NOVALUE, Tlv35}
end,

%%-------------------------------------------------
%% attribute statsdNamespace(36) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term36,Tlv37} = case Tlv36 of
[{131107,V36}|TempTlv37] ->
    {begin
binary_to_list(decode_restricted_string(V36, []))
end
, TempTlv37};
    _ ->
        { asn1_NOVALUE, Tlv36}
end,

%%-------------------------------------------------
%% attribute statsdLatencyWindow(37) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term37,Tlv38} = case Tlv37 of
[{131108,V37}|TempTlv38] ->
    {begin
Val8 = decode_integer(V37, []),
if 1 =< Val8, Val8 =< 'MAX' ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv38};
    _ ->
        { asn1_NOVALUE, Tlv37}
end,

case Tlv38 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Start', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26, Term27, Term28, Term29, Term30, Term31, Term32, Term33, Term34, Term35, Term36, Term37}.



%%================================
%%  Stop
%%================================
'enc_Stop'(Val) ->
    'enc_Stop'(Val, [<<48>>]).

'enc_Stop'(Val, TagIn) ->
{_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Stop'(Tlv) ->
   'dec_Stop'(Tlv, [16]).

'dec_Stop'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'Stop'}.



%%================================
%%  TcpPort
%%================================
'enc_TcpPort'(Val) ->
    'enc_TcpPort'(Val, [<<2>>]).

'enc_TcpPort'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_TcpPort'(Tlv) ->
   'dec_TcpPort'(Tlv, [2]).

'dec_TcpPort'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IncreaseRatePercent
%%================================
'enc_IncreaseRatePercent'(Val) ->
    'enc_IncreaseRatePercent'(Val, [<<2>>]).

'enc_IncreaseRatePercent'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_IncreaseRatePercent'(Tlv) ->
   'dec_IncreaseRatePercent'(Tlv, [2]).

'dec_IncreaseRatePercent'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DecreaseRatePercent
%%================================
'enc_DecreaseRatePercent'(Val) ->
    'enc_DecreaseRatePercent'(Val, [<<2>>]).

'enc_DecreaseRatePercent'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_DecreaseRatePercent'(Tlv) ->
   'dec_DecreaseRatePercent'(Tlv, [2]).

'dec_DecreaseRatePercent'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SetRate
%%================================
'enc_SetRate'(Val) ->
    'enc_SetRate'(Val, [<<9>>]).

'enc_SetRate'(Val, TagIn) ->
begin
Realval1 = ber_encode_real(Val),
Realsize1 = byte_size(Realval1),
encode_tags(TagIn, Realval1, Realsize1)
end.


'dec_SetRate'(Tlv) ->
   'dec_SetRate'(Tlv, [9]).

'dec_SetRate'(Tlv, TagIn) ->
begin
Tmpbuf1 = match_tags(Tlv, TagIn),
decode_real(Tmpbuf1)
end
.



%%================================
%%  CurrentRate
%%================================
'enc_CurrentRate'(Val) ->
    'enc_CurrentRate'(Val, [<<48>>]).

'enc_CurrentRate'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute valueBase(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
unlimited -> encode_tags([<<128>>], [0], 1);
bytesPerSecond -> encode_tags([<<128>>], [1], 1);
messagesPerSecond -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute value(2) with type REAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} = begin
Realval1 = ber_encode_real(Cindex2),
Realsize1 = byte_size(Realval1),
encode_tags([<<129>>], Realval1, Realsize1)
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CurrentRate'(Tlv) ->
   'dec_CurrentRate'(Tlv, [16]).

'dec_CurrentRate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute valueBase(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> unlimited;
1 -> bytesPerSecond;
2 -> messagesPerSecond;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute value(2) with type REAL
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Tmpbuf1 = match_tags(V2, [131073]),
decode_real(Tmpbuf1)
end
,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CurrentRate', Term1, Term2}.



%%================================
%%  PositiveInteger
%%================================
'enc_PositiveInteger'(Val) ->
    'enc_PositiveInteger'(Val, [<<2>>]).

'enc_PositiveInteger'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PositiveInteger'(Tlv) ->
   'dec_PositiveInteger'(Tlv, [2]).

'dec_PositiveInteger'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 'MAX' ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NonNegativeReal
%%================================
'enc_NonNegativeReal'(Val) ->
    'enc_NonNegativeReal'(Val, [<<9>>]).

'enc_NonNegativeReal'(Val, TagIn) ->
begin
Realval1 = ber_encode_real(Val),
Realsize1 = byte_size(Realval1),
encode_tags(TagIn, Realval1, Realsize1)
end.


'dec_NonNegativeReal'(Tlv) ->
   'dec_NonNegativeReal'(Tlv, [9]).

'dec_NonNegativeReal'(Tlv, TagIn) ->
begin
Tmpbuf1 = match_tags(Tlv, TagIn),
decode_real(Tmpbuf1)
end
.



%%================================
%%  PositiveReal
%%================================
'enc_PositiveReal'(Val) ->
    'enc_PositiveReal'(Val, [<<9>>]).

'enc_PositiveReal'(Val, TagIn) ->
begin
Realval1 = ber_encode_real(Val),
Realsize1 = byte_size(Realval1),
encode_tags(TagIn, Realval1, Realsize1)
end.


'dec_PositiveReal'(Tlv) ->
   'dec_PositiveReal'(Tlv, [9]).

'dec_PositiveReal'(Tlv, TagIn) ->
begin
Tmpbuf1 = match_tags(Tlv, TagIn),
decode_real(Tmpbuf1)
end
.



%%================================
%%  URL
%%================================
'enc_URL'(Val) ->
    'enc_URL'(Val, [<<19>>]).

'enc_URL'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_URL'(Tlv) ->
   'dec_URL'(Tlv, [19]).

'dec_URL'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

ber_encode_real(0) ->
    {[],0};
ber_encode_real('PLUS-INFINITY') ->
    {[64],1};
ber_encode_real('MINUS-INFINITY') ->
    {[65],1};
ber_encode_real(Val) when is_tuple(Val); is_list(Val) ->
    encode_real(Val).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_integer2(Len, <<0:1,_:7,_Bs/binary>> = Bin, RemovedBytes) ->
    <<Int:Len/unit:8,Buffer2/binary>> = Bin,
    {Int,Buffer2,RemovedBytes};
decode_integer2(Len, <<1:1,B2:7,Bs/binary>>, RemovedBytes) ->
    <<N:Len/unit:8,Buffer2/binary>> = <<B2,Bs/binary>>,
    Int = N - (1 bsl (8 * Len - 1)),
    {Int,Buffer2,RemovedBytes}.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_real(Buffer) ->
    Sz = byte_size(Buffer),
    {RealVal,<<>>,Sz} = decode_real2(Buffer, [], Sz, 0),
    RealVal.

decode_real2(Buffer, _C, 0, _RemBytes) ->
    {0,Buffer};
decode_real2(Buffer0, _C, Len, RemBytes1) ->
    <<First,Buffer2/binary>> = Buffer0,
    if
        First =:= 64 ->
            {'PLUS-INFINITY',Buffer2};
        First =:= 65 ->
            {'MINUS-INFINITY',Buffer2};
        First =:= 1
        orelse
        First =:= 2
        orelse
        First =:= 3 ->
            {NRx,Rest} = split_binary(Buffer2, Len - 1),
            {binary_to_list(NRx),Rest,Len};
        true ->
            <<_B7:1,Sign:1,BB:2,_FF:2,EE:2>> = <<First>>,
            Base =
                case BB of
                    0 ->
                        2;
                    _ ->
                        exit({error,{asn1,{non_supported_base,BB}}})
                end,
            {FirstLen,{Exp,Buffer3,_Rb2},RemBytes2} =
                case EE of
                    0 ->
                        {2,
                         decode_integer2(1, Buffer2, RemBytes1),
                         RemBytes1 + 1};
                    1 ->
                        {3,
                         decode_integer2(2, Buffer2, RemBytes1),
                         RemBytes1 + 2};
                    2 ->
                        {4,
                         decode_integer2(3, Buffer2, RemBytes1),
                         RemBytes1 + 3};
                    3 ->
                        <<ExpLen1,RestBuffer/binary>> = Buffer2,
                        {ExpLen1 + 2,
                         decode_integer2(ExpLen1, RestBuffer, RemBytes1),
                         RemBytes1 + ExpLen1}
                end,
            Length = Len - FirstLen,
            <<LongInt:Length/unit:8,RestBuff/binary>> = Buffer3,
            {{Mantissa,Buffer4},RemBytes3} =
                if
                    Sign =:= 0 ->
                        {{LongInt,RestBuff},1 + Length};
                    true ->
                        {{- LongInt,RestBuff},1 + Length}
                end,
            {{Mantissa,Base,Exp},Buffer4,RemBytes2 + RemBytes3}
    end.

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_neg_integer(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_neg_integer(N, Acc) ->
    encode_neg_integer(N bsr 8, [N band 255|Acc]).

encode_pos_integer(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_pos_integer(N, Acc) ->
    encode_pos_integer(N bsr 8, [N band 255|Acc]).

encode_real(Real) ->
    encode_real([], Real).

encode_real(_C, {Mantissa,Base,Exponent}) when Base =:= 2 ->
    {Man,ExpAdd} = truncate_zeros(Mantissa),
    Exp = Exponent + ExpAdd,
    OctExp =
        if
            Exp >= 0 ->
                list_to_binary(encode_pos_integer(Exp, []));
            true ->
                list_to_binary(encode_neg_integer(Exp, []))
        end,
    SignBit =
        if
            Man > 0 ->
                0;
            true ->
                1
        end,
    SFactor = 0,
    OctExpLen = byte_size(OctExp),
    if
        OctExpLen > 255 ->
            exit({error,{asn1,{to_big_exp_in_encode_real,OctExpLen}}});
        true ->
            true
    end,
    {LenCode,EOctets} =
        case OctExpLen of
            1 ->
                {0,OctExp};
            2 ->
                {1,OctExp};
            3 ->
                {2,OctExp};
            _ ->
                {3,<<OctExpLen,OctExp/binary>>}
        end,
    BB = 0,
    FirstOctet = <<1:1,SignBit:1,BB:2,SFactor:2,LenCode:2>>,
    OctMantissa =
        if
            Man > 0 ->
                list_to_binary(real_mininum_octets(Man));
            true ->
                list_to_binary(real_mininum_octets(- Man))
        end,
    <<FirstOctet/binary,EOctets/binary,OctMantissa/binary>>;
encode_real(C, {Mantissa,Base,Exponent})
    when Base =:= 10, is_integer(Mantissa), is_integer(Exponent) ->
    ManStr = integer_to_list(Mantissa),
    encode_real_as_string(C, ManStr, Exponent);
encode_real(_C, {_,Base,_}) ->
    exit({error,{asn1,{encode_real_non_supported_encoding,Base}}});
encode_real(C, Real) when is_list(Real) ->
    {Mantissa,Exponent} =
        case string:tokens(Real, "Ee") of
            [NR2] ->
                {NR2,0};
            [NR3MB,NR3E] ->
                {NR3MB,list_to_integer(NR3E)}
        end,
    ZeroDecimal =
        fun("0") ->
               "";
           (L) ->
               L
        end,
    {NewMantissa,LenDecimal} =
        case Mantissa of
            [$.|Dec] ->
                NewMan = remove_trailing_zeros(Dec),
                {NewMan,length(ZeroDecimal(NewMan))};
            _ ->
                case string:tokens(Mantissa, ",.") of
                    [Num] ->
                        {integer_to_list(list_to_integer(Num)),0};
                    [Num,Dec] ->
                        NewDec = ZeroDecimal(remove_trailing_zeros(Dec)),
                        NewMan =
                            integer_to_list(list_to_integer(Num))
                            ++
                            NewDec,
                        {integer_to_list(list_to_integer(NewMan)),
                         length(NewDec)}
                end
        end,
    encode_real_as_string(C, NewMantissa, Exponent - LenDecimal).

encode_real_as_string(_C, Mantissa, Exponent)
    when is_list(Mantissa), is_integer(Exponent) ->
    TruncMant = remove_trailing_zeros(Mantissa),
    ExpIncr = length(Mantissa) - length(TruncMant),
    ExpStr = integer_to_list(Exponent + ExpIncr),
    ExpBin =
        case ExpStr of
            "0" ->
                <<"E+0">>;
            _ ->
                ExpB = list_to_binary(ExpStr),
                <<$E,ExpB/binary>>
        end,
    ManBin = list_to_binary(TruncMant),
    NR3 = 3,
    <<NR3,ManBin/binary,$.,ExpBin/binary>>.

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

real_mininum_octets(0, Acc) ->
    Acc;
real_mininum_octets(Val, Acc) ->
    real_mininum_octets(Val bsr 8, [Val band 255|Acc]).

real_mininum_octets(Val) ->
    real_mininum_octets(Val, []).

remove_trailing_zeros(IntStr) ->
    case
        lists:dropwhile(fun($0) ->
                               true;
                           (_) ->
                               false
                        end,
                        lists:reverse(IntStr))
    of
        [] ->
            "0";
        ReversedIntStr ->
            lists:reverse(ReversedIntStr)
    end.

truncate_zeros(0, Sum) ->
    {0,Sum};
truncate_zeros(M, Sum) ->
    case M band 15 =:= M band 14 of
        true ->
            truncate_zeros(M bsr 1, Sum + 1);
        _ ->
            {M,Sum}
    end.

truncate_zeros(Num) ->
    truncate_zeros(Num, 0).
